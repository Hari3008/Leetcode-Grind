class Solution:
    def subsetsWithDup(self, nums: List[int]) -> List[List[int]]:

        res = []
        curr = []
        def dfs(i):
            if len(nums) == i:
                res.append(curr.copy())
                return

            curr.append(nums[i])
            dfs(i+1)
            curr.pop()
            while i + 1 < len(nums) and nums[i] == nums[i+1]:
                i+=1
            dfs(i+1)
        nums.sort()
        dfs(0)
        return res

        
        # Backtracking - Brute => Generates duplicates so we use a set to hold only the unique subsets -> Works but the space complexity is always 2^n
        # res = set()
        # curr = []
        # def dfs(i):
        #     if len(nums) == i:
        #         res.add(tuple(curr))
        #         return

        #     curr.append(nums[i])
        #     dfs(i+1)
        #     curr.pop()
        #     dfs(i+1)
        # nums.sort()
        # dfs(0)
        # return [list(s) for s in res]
